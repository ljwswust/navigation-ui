# 环境变量配置模板
# 复制此文件为 .env.local 并填入实际值

# ==============================================
# Supabase 配置 (必需)
# ==============================================
NEXT_PUBLIC_SUPABASE_URL=your_supabase_project_url_here
NEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key_here

# ==============================================
# 密码加密配置 (推荐配置)
# ==============================================

# 加密密钥 - 生产环境必须更改为强随机密钥
# 生成方法: require('crypto').randomBytes(32).toString('hex')
NEXT_PUBLIC_ENCRYPTION_KEY=change-this-to-a-secure-64-character-hex-key-in-production

# 加密模式选择
# - hash: 哈希加密 (推荐，不可逆)
# - encrypt: 对称加密 (可解密)  
# - none: 无客户端加密 (仅开发环境)
NEXT_PUBLIC_ENCRYPTION_MODE=hash

# ==============================================
# 密码策略配置 (可选)
# ==============================================

# 最小密码长度
NEXT_PUBLIC_PASSWORD_MIN_LENGTH=8

# 启用密码强度验证
NEXT_PUBLIC_ENABLE_PASSWORD_STRENGTH=true

# 密码复杂度要求
NEXT_PUBLIC_REQUIRE_UPPERCASE=true
NEXT_PUBLIC_REQUIRE_LOWERCASE=true
NEXT_PUBLIC_REQUIRE_NUMBERS=true
NEXT_PUBLIC_REQUIRE_SYMBOLS=true

# ==============================================
# 安全功能配置 (高级)
# ==============================================

# 启用双因素认证 (计划中的功能)
NEXT_PUBLIC_ENABLE_2FA=false

# 会话超时时间 (分钟)
NEXT_PUBLIC_SESSION_TIMEOUT=60

# 最大登录尝试次数
NEXT_PUBLIC_MAX_LOGIN_ATTEMPTS=5

# 账户锁定时间 (分钟)
NEXT_PUBLIC_LOCKOUT_DURATION=15

# ==============================================
# 开发配置 (仅开发环境)
# ==============================================

# 启用调试模式
NEXT_PUBLIC_DEBUG_AUTH=false

# 跳过密码强度验证 (仅开发)
NEXT_PUBLIC_SKIP_PASSWORD_VALIDATION=false

# ==============================================
# 生产环境示例
# ==============================================

# 生产环境推荐配置:
# NEXT_PUBLIC_ENCRYPTION_MODE=hash
# NEXT_PUBLIC_PASSWORD_MIN_LENGTH=12
# NEXT_PUBLIC_ENABLE_PASSWORD_STRENGTH=true
# NEXT_PUBLIC_MAX_LOGIN_ATTEMPTS=3
# NEXT_PUBLIC_LOCKOUT_DURATION=30

# ==============================================
# 安全提醒
# ==============================================

# ⚠️  重要安全提醒:
# 1. 生产环境务必更改 ENCRYPTION_KEY
# 2. 不要在代码中硬编码敏感信息
# 3. 定期轮换加密密钥
# 4. 启用 HTTPS 传输
# 5. 监控异常登录活动

# 生成安全密钥的方法:
# Node.js: require('crypto').randomBytes(32).toString('hex')
# OpenSSL: openssl rand -hex 32
# 在线工具: https://www.allkeysgenerator.com/Random/Security-Encryption-Key-Generator.aspx